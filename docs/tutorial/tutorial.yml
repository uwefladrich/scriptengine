---

# =================================================================================================
# The ScriptEngine tutorial file
# -------------------------------------------------------------------------------------------------
# This tutorial file is about using the ScriptEngine via the 'se' command and Yaml files.
# It explains (most of) the features implemented in ScriptEngine/se. Read it, run it
# ('se tutorial.yml'), play around with it and enjoy using ScriptEngine!
# =================================================================================================


# -------------------------------------------------------------------------------------------------
# Switch on ScriptEngine timing
# -------------------------------------------------------------------------------------------------
- base.task_timer:
    mode: instances


# -------------------------------------------------------------------------------------------------
# Some simple tasks:
# -------------------------------------------------------------------------------------------------

- base.echo:  # The *echo* task just writes out stuff
    msg: Hello, world!

  # Same, in compact YAML syntax
- base.echo: {msg: "World, hello again!"}

- base.command:  # The *command* task runs commands, in this case 'ls'
    name: ls

- base.command:  # The *command* task can take argument lists
    name: mkdir
    args: [-p, foo]

- base.make_dir: # Note that there is a special task to create directories
    path: bar

- base.command:  # The *command* task can change the current working directory
            # Note that *args* still needs to be a list, even when it's just one item!
    name: touch
    args: [bar.txt]
    cwd:  foo

- base.copy:  # The *copy* task copies files
    src: foo/bar.txt
    dst: foo/bar.txt.j2

- base.template: # The *template* task renders Jinja2 template files
    src: foo/bar.txt.j2
    dst: foo/bar.txt

  # Just cleaning up ...
- base.remove:
    path: '{{item}}'
  loop: [foo, bar]

# -------------------------------------------------------------------------------------------------
# Working with the ScriptEngine context
# -------------------------------------------------------------------------------------------------

- base.context:  # A simple value stored under the name 'planet'
    planet: world
- base.echo:    # Access the value stored above
    msg: "Hello, {{planet}}!"

- base.context:  # Context values can be nested and may contain lists
    countries:
        nordic: [Sweden, Norway, Danmark, Finnland, Iceland]
        other:  [foo, bar, baz]
    people:
        boss: Mary
        workers: [Peter, Paul]
    number: 5

- base.getenv: # The *getenv* task sets a context item from an environment variable
    home: HOME
- base.echo: {msg: "My home is at {{home}}"}


# -------------------------------------------------------------------------------------------------
# Working with loops
# -------------------------------------------------------------------------------------------------

- base.echo:  # Tasks can be repeated by using *loop*s:
         # - note correct indentation!
         # - the *loop* index is {{item}}
         # - *loop*s may not be nested
    msg: "Hello, {{item}}!"
  loop: [earth, mars]

- base.echo:  # *Loop* lists can be defined in context tasks
    msg: "A nice country: {{item}}"
  loop: "{{countries.nordic}}"


# -------------------------------------------------------------------------------------------------
# Working with 'when' clauses
# -------------------------------------------------------------------------------------------------

  # Jobs may contain a *when* clause (a conditional)
  # - *when* clauses are evaluated by Jinja2
  # - they may therefore access context items
- base.context:
    i: 7
- base.echo: {msg: "i is pretty big (it's {{i}})"}
  when: i>5
- base.echo: {msg: "i is not so big (just {{i}})"}
  when: i<=5

  # Loops and *when* clauses can be combined, however:
  # - the *when* clause must not access {{item}}
  # - the *when* clause is evaluated only once
- base.echo: {msg: "i is not so big (just {{i}})"}
  loop: [1,2,3]
  when: i<=5


# -------------------------------------------------------------------------------------------------
# Composite jobs
# -------------------------------------------------------------------------------------------------

# Jobs can be grouped by using *do*, which is useful when you want to apply *loop*s or *when*
# clauses to multiple tasks/jobs
- do:
    - base.echo: {msg: "We can do something with '{{item}}'"}
    - base.echo: {msg: "Maybe we want to do something else with '{{item}}' as well"}
  loop: [foo, bar, baz]

- do: # With *do* jobs, you can combine *loop* and *when* AND access the *loop* index *item*
    - base.echo: {msg: "Item is not so big (just {{item}}), but wait!"}
      when: "item<5"
    - base.echo: {msg: "Now item is pretty big! ({{item}})"}
      when: "item>=5"
  loop: [1,2,3,4,5,6,7,8,9]


# -------------------------------------------------------------------------------------------------
# Include files
# -------------------------------------------------------------------------------------------------

# Other YAML files can be included.
- base.include:
    src: tutorial.inc.yml

# Note that including files in ScriptEngine is done at run time! This means
# that the include file is read, parsed, and executed at the time when the
# Include task is run from the parent file.


# -------------------------------------------------------------------------------------------------
# Find task
# -------------------------------------------------------------------------------------------------

- base.find:
    path: .
    pattern: '*.yml'
    set: found_files
- base.echo:
    msg: "Files found -- {{found_files}}"


# -------------------------------------------------------------------------------------------------
# Print timing results
# -------------------------------------------------------------------------------------------------
- base.echo:
    msg: !noparse_yaml |

        {% if se.tasks.timing.mode -%}
        ScriptEngine timings
        ====================

        {% if 'classes' in se.tasks.timing.timers -%}
        Timing for task classes
        -----------------------
        {%- for class, time in se.tasks.timing.timers.classes|dictsort(false, 'value') %}
            {{"%12s: %9.3f seconds" % (class, time)}}
        {%- endfor %}
        {%- endif %}

        {% if 'instances' in se.tasks.timing.timers -%}
        Timing for task instances
        -------------------------
        {%- for uid, time in se.tasks.timing.timers.instances|dictsort(false, 'value') %}
            {{"%12s: %9.3f seconds" % ((uid|string).split('-')[-1], time)}}
        {%- endfor %}
        {% endif %}
        {% else -%}
        No detailed Scriptengine timing activated
        {% endif %}


# -------------------------------------------------------------------------------------------------
# Exit task
# -------------------------------------------------------------------------------------------------

# The exit task requests the ScriptEngine instance to stop execution. It takes
# an *optional* message ('msg') parameter.
- base.exit:
    msg: This is the end of the tutorial!

# The SimpleScriptEngine will just stop the execution via sys.exit()
# Other (e.g. parallel) ScriptEngines may do some clean-up first.

...
